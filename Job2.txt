1. Create a detailed migration plan that outlines the steps required to move 
the application and its data to the cloud. This plan should take into 
consideration the application's dependencies on other systems, such as 
SAP ERP and SQL Server 2008 R2.

2. Identify the dependencies: Understand the dependencies of the legacy 
application iPlan321 on other systems, such as SAP ERP and 
SQL Server 2008 R2. This includes identifying the web services that are 
used to integrate with SAP PI middleware, as well as the SQL queries, 
stored procedures, and jobs that are used to integrate with external 
systems like ADVANCED DEMAND, ADVANCED STOCK, ADVANCED PRODUCTION, and 
STATS.

2. Identify the data flow: Understand the data flow between the legacy 
application and the other systems it depends on. This includes 
identifying the data that is stored in the SQL Server 2008 R2 database and 
how it is used by the legacy application, as well as the data that is 
exchanged between the legacy application and other systems through web 
services or SQL queries.

2. Migrate the application: Use AWS Application Discovery Service to 
map the dependencies and configurations of the legacy application.
AWS Server Migration Service(SMS) to migrate the application to the cloud.

3. Migrate the database: Use AWS Database Migration Service (DMS) to 
migrate the 16 TB of data from the SQL Server 2008 R2 database to an 
Amazon RDS for SQL Server or Aurora.

4. Optimize the integration: Optimize the integration between the migrated 
application and external systems, such as SAP ERP and ADVANCED DEMAND, 
by using AWS integration services like AWS AppSync or AWS Glue.

5. Finally, update the integration with external systems with the new 
endpoint and test the integration again.



INTERGRATION

1. Assess the integration requirements: Understand the requirements and 
dependencies of the legacy application on SAP ERP. Identify the web 
services that are used to integrate with SAP PI middleware, as well as the 
data that is exchanged between the legacy application and SAP ERP.

2. Identify the integration options: Identify the integration options 
available for connecting the migrated application to SAP ERP in the cloud. 
This includes evaluating different options for integrating the application 
with SAP ERP through web services, such as using AWS AppSync or AWS API 
Gateway.

3. Configure the integration: Configure the integration between the 
migrated application and SAP ERP using the chosen integration option. 
This includes setting up the necessary connectivity and authentication, 
as well as configuring the data flow between the migrated application and 
SAP ERP.

4. Test the integration: Test the integration between the migrated 
application and SAP ERP to ensure that it is working as expected. 
This includes testing the functionality of the integration and the data 
flow between the two systems.

5. Update the SAP PI middleware: Update the SAP PI middleware with the new 
endpoint and test the integration again.

The integration process might involve more complex steps, such as migrating 
the SAP PI middleware to the cloud or integrating with other systems



SHOULD WE MIGRATE SAP ERP

1. Cloud readiness: Assess the readiness of SAP ERP for migration to the 
cloud. This includes evaluating the architecture, scalability, and security
of the system, as well as any customizations or integrations that have 
been made to the system.

2. Business needs: Consider the business needs of your organization and 
how migrating SAP ERP to the cloud can support those needs. This includes 
evaluating the potential benefits of migrating SAP ERP to the cloud, 
such as improved scalability, flexibility, and cost savings.

3. Vendor support: Check if the SAP ERP version you are using is still 
supported by SAP and if there's a cloud version available, check if the 
migration path is supported by SAP.

4. Integration: Consider the integration of the migrated application with 
SAP ERP. If the integration is critical for the migrated application's 
functionality, it might be necessary to migrate SAP ERP to the cloud to 
ensure that the integration can be maintained

In general, if the SAP ERP is a critical system that needs to be integrated 
with the migrated application, migrating it to the cloud would be beneficial. 
However, if the SAP ERP is not a critical system, or if the cost and 
complexity of migrating the system outweigh the potential benefits, it 
may not be necessary to migrate the SAP ERP to the cloud.



SHOULD WE MIGRATE THE OTHER EXTERNAL DATABASE APPLICATION

1. Integration: Consider the integration of the other external database 
applications with the legacy application and the SQL Server 2008 R2 
database. If the integration is critical for the legacy application's 
functionality, it might be necessary to migrate the other external database 
applications to the cloud to ensure that the integration can be maintained.

2. Business needs: Evaluate the business needs of your organization and 
how migrating the other external database applications to the cloud can 
support those needs. This includes evaluating the potential benefits of 
migrating the other external database applications to the cloud, such as 
improved scalability, flexibility, and cost savings.

3. Vendor support: Check if the version of the other external database 
applications you are using is still supported by the vendor and if there's 
a cloud version available, check if the migration path is supported by 
the vendor

4. Data size and complexity: Assess the size and complexity of the data 
stored in the other external database applications, as well as the 
performance requirements for the data. This will help you to identify any 
challenges that may arise during the migration process and plan accordingly.


HOW WILL YOU MIGRATE EXTERNAL APPLICATION TO THE Cloud

1. Migrate the data: Migrate the data from the external database 
applications to the cloud. This includes exporting the data from the 
on-premises systems and importing it into the cloud systems. 
Depending on the migration option you choose, you might need to use 
data replication or data backup/restore method.

2. Configure the cloud systems: Configure the cloud systems to match the 
configuration of the on-premises systems. This includes setting up the 
necessary connectivity and authentication, as well as configuring the data 
flow between the cloud systems and the on-premises systems.



CONNECTION TO EXTERNAL DATABASE APPLICATION

If we do not migrate the application to the cloud, here are some possible ways 
to establish connection between the migrated app and the external 
database applications. Choose the one that best fits

1. VPN or Direct Connect: Use a Virtual Private Network (VPN) or AWS 
Direct Connect to establish a secure and stable connection between the 
cloud-based migrated application and the on-premises external database 
applications. This will allow the migrated application to access the data 
stored in the external database applications.

2. Data replication: Use data replication methods such as AWS Database 
Migration Service (DMS) to replicate the data from the external database 
applications to the cloud, so that the migrated application can access 
the replicated data.

3. Database proxy: Use a database proxy such as AWS DataSync to enable 
the migrated application to access the external database applications by 
routing the database requests through the proxy.

4. API Gateway: Use API Gateway to create an API that the migrated 
application can use to access the external database applications. 
This allows you to control access to the external database applications 
and to use caching, logging, and monitoring features.

5. Direct SQL or API calls: You can establish direct SQL or API calls 
between the migrated application and the external database applications, 
but this approach would require an open connection between the cloud and 
on-premise environment, which may not be suitable depending on your 
organization security policy.


CONNECTION TO SAP ERP AND SAP PI middleware

If you did not migrate the SAP. You can pick any of the below ways to connect


1. VPN or Direct Connect: Use a Virtual Private Network (VPN) or 
AWS Direct Connect to establish a secure and stable connection 
between the cloud-based migrated application and the on-premises 
SAP PI middleware and SAP ERP. This will allow the migrated application 
to access the services provided by the SAP PI middleware and SAP ERP.


2. API Gateway: Use API Gateway to create an API that the migrated 
application can use to access the SAP PI middleware and SAP ERP services. 
This allows you to control access to the services and to use caching, 
logging, and monitoring features.

3. Web services: You can use web services such as SOAP or REST to 
integrate the migrated application with the SAP PI middleware and 
SAP ERP. This approach allows the migrated application to send and 
receive data to the SAP PI middleware and SAP ERP using standard 
web services protocols.

4. Messaging Queue: You can use messaging queue such as SQS, RabbitMQ or 
Kafka to integrate the migrated application with the SAP PI middleware and 
SAP ERP. This approach allows the migrated application to send and receive 
data asynchronously and in a decoupled way.

5. Hybrid Integration Platform (HIP): Use a Hybrid Integration 
Platform (HIP) such as AWS App Runner or AWS Lambda to integrate the 
migrated application with the SAP PI middleware and SAP ERP. This approach 
allows you to create a consistent interface for the migrated application 
to interact with the SAP PI middleware and SAP ERP, regardless of whether 
the systems are on-premises or in the cloud.


WHAT IS A SHARED DATATBASE

In the context of the provided information, a shared database refers to a 
database that is used by multiple systems or applications. In this case, 
the shared database is the SQL Server 2008 R2 database that is running on 
the SQL Cluster Server. This database stores the data for the iPlan321 
application and is also used by several external systems, such as ADVANCED 
DEMAND, ADVANCED STOCK, ADVANCED PRODUCTION, and STATS. These external 
systems are integrated with the shared database through complex SQL queries, 
SQL stored procedures, and SQL jobs.

